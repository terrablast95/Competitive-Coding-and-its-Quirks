Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.




My Solution:

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        x=len(nums)
        for i in range(0,x):
            for j in range(i+1,x):
                if nums[i]+nums[j]==target:
                    return [i,j]
                    
                    
Optimised Solution:
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        prevMap = {} # val : index
        
        for i, n in enumerate(nums):
            diff = target - n
            if diff in prevMap:
                return [prevMap[diff], i]
            prevMap[n] = i
        return
        
        
 It uses hashmaps; it starts off with an empty hashmap and then fills it up with {element:index} as elements fail to satisfy the condition
 diff=target-n as when we have one element; we just need to check if its difference is present or not. 
